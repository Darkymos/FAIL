|> "simple integer stroke calculations ------------------------------------";
|> 45 + 3;
|> 90 - 4;
|> 100 - 10 + 5;
|> 100 + 10 - 5;
|> -10;
|> -10 + 5;

|> "simple integer dot calculations ---------------------------------------";
|> 87 * 9;
|> 90 / 10;
|> 90 / 11;
|> 90 * 10 / 20;
|> 100 / 20 * 13;

|> "simple integer mixed calculation (dot before stroke) ------------------";
|> 90 / 10 + 1;

|> "simple double calculations --------------------------------------------";
|> 9.5 + 8.7;
|> 7.1 - 0.1;
|> 0.5 * 3.5;
|> 1.5 / 0.5;

|> "simple mixed double and integer calculations --------------------------";
|> 9 + 1.5;
|> 8 - 0.5;
|> 10 * 0.5;
|> 5 / 0.5;
|> 1.5 + 9;
|> 0.5 - 8;
|> 0.5 * 10;
|> 0.5 / 5;
|> 10.0 * 2;
|> 10. * 2;

|> "test for dot before stroke with parentheses ---------------------------";
|> (1 + 4) * 10;

|> "strings ---------------------------------------------------------------";
|> "Hello World!";
|> "Hello " + "World!";
|> "Hello World!" + (3 as string); // test comment

|> "string interpolations -------------------------------------------------";
|> "10 + 5 is " + ((10 + 5) as string);

|> "variables -------------------------------------------------------------";
var test = "Hello World!";
|> test;
var anotherTest = test + (42 as string);
|> anotherTest;
anotherTest = anotherTest + (1 as string);
|> anotherTest;
//test = 42; not working, type safety!
//|> test = "test"; not working!
//var test = 42; already assigned!
var lazy;
//|> lazy; doesn't work!
lazy = 1;
|> lazy;

|> "functions -------------------------------------------------------------";
void TestFunction() {
	var local = "test";
	|> test; // variable from outer scope
	|> "Hello World!";
}
TestFunction();
TestFunction();
/*
	|> local; not allowed, out of scope!
	void TestFunction() { already assigned!
	}
	void test() { already assigned!
	}
*/

|> "functions with parameters ---------------------------------------------";
void Log(string value) {
	|> "Call to 'Log'";
	|> value;
}
Log("test");
|> 42 as string; // implicit coversions + methods? -> implicit conversion to object should be possible
//|> 42, "test"; wrong argument count!

|> "functions with return value -------------------------------------------";
int AddIntegers(int a, int b) {
	return a + b;
}
var result = AddIntegers(1, 2);
|> result;
|> AddIntegers(10, 5);

// test for call in other file (will be improved in the future)
//|> Substract(10, 5);

|> "booleans --------------------------------------------------------------";
|> true;
|> false;
|> true == true;
|> true == false;
|> 1 == 1;
|> "h" == "s";
|> 1 == 10 - 9;
|> 6 + 1 == 2 * 3 + 1;
|> true != false;
|> test != test;
|> 2 >= 1;
|> 1 <= 0;
|> 42 > 1;
|> 42 < 1337;
|> "t" == 't';

|> "if --------------------------------------------------------------------";
if (test == test) {
	|> "in if";
}
if (test != test) {
	|> "unreachable code";
}
if (test != test) {
	|> "unreachable code";
} 
else {
	|> "in else";
}
if (42 == 1337) {
	|> "unreachable code";
} 
else if (42 == 42) {
	|> "in else if";
}
else {
	|> "unreachable code";
}

|> "while -----------------------------------------------------------------";
var i = 0;
while (i < 10) {
	|> i;
	i += 1;
	if (i == 5) {
		continue;
	}
	|> "again :)";
}
i = 0;
while (i < 10) {
	|> "i is " + (i as string);
	i += 1;
	if (i == 5) {
		break;
	}
}

|> "self assignments ------------------------------------------------------";
var dummy = 0;
|> dummy;
dummy += 3;
|> dummy;
dummy -= 1;
|> dummy;
dummy *= 5;
|> dummy;
dummy /= 2;
|> dummy;

|> "input -----------------------------------------------------------------";
//|> input();
//|> input("Guess a number: ");

|> "incremental operators -------------------------------------------------";
var inc = 0;
|> inc;
inc++;
|> inc;
inc--;
|> inc;

|> "for -------------------------------------------------------------------";
for (var i = 0; i < 10; i++) {
	|> i;
}

|> "body-less instructions ------------------------------------------------";
if (inc == 0) |> "inc is 0";
//void BodyLessFunction() |> "body-less function"; not working!

|> "typed functions and variables------------------------------------------";
int AddValues(int a, int b) {
	return a + b;
}
|> AddValues(3, 2);
int integer = 1;
|> integer;

|> "functions with optional parameters ------------------------------------";
int Increment(int a, int b = 1) {
	return a + b;
}
|> Increment(5);
|> Increment(5, 3);

|> "type system tests -----------------------------------------------------";
int integerVar = 5;
//int shouldBeInteger = "FAIL"; wrong type!

|> "function overload tests -----------------------------------------------";
int Add(int a, int b) {
	return a + b;
}
string Add(string a, string b) {
	return a + b;
}
|> Add(5, 10);
|> Add("5", "10");

|> "type conversion tests -------------------------------------------------";
var integerValue = 10;
var stringValue = integerValue as string;
var combinedInteger = integerValue + 10;
var combinedString = stringValue + "10";
|> combinedInteger;
|> combinedString;
|> (5 + 10 as string) + "5";

|> "logical operators -----------------------------------------------------";
var firstValue = true;
var secondValue = false;
|> firstValue || secondValue;
|> firstValue && secondValue;
|> (firstValue or secondValue) and firstValue;
|> (firstValue and secondValue) or secondValue;
|> !firstValue;
|> not secondValue;

|> "chars -----------------------------------------------------------------";
var H = 'H';
var e = 'e';
var l = 'l';
var o = 'o';
var space = ' ';
var W = 'W';
var r = 'r';
var d = 'd';
var exclamationMark = '!';
|> H + e + l + l + o + space + W + o + r + l + d + exclamationMark;

|> "classes ---------------------------------------------------------------";
class TestClass {
	var test = 0;

	void Call() {
		|> "Call to TestClass.Call";
	}
}
var instance = new TestClass();
instance.Call();
|> instance.test;

// end of program